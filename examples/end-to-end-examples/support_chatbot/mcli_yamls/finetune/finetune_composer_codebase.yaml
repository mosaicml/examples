name: mpt-support-bot-finetune-composer-codebase

scheduling:
  preemptible: true
  priority: high

compute:
  gpus: 8  # Number of GPUs to use

  ## These configurations are optional
  # cluster: r0z0 # Name of the cluster to use for this run
  # gpu_type: a100_80gb # Type of GPU to use.

integrations:
# Clone and install the llm-foundry repo so we can run scripts from it
- integration_type: git_repo
  git_repo: mosaicml/llm-foundry
  git_branch: main # TODO: pin
  pip_install: -e .[gpu]
  ssh_clone: false # Should be true if using a private repo
# Uncomment and fill in to log to WandB. Also uncomment the loggers section near the bottom of the yaml
- integration_type: wandb
  entity: mosaic-ml
  project: support-bot-demo-codebase

# cd into the llm-foundry/scripts directory and run the train.py script
command: |
  cd llm-foundry/scripts
  composer train/train.py /mnt/config/parameters.yaml

image: mosaicml/pytorch:1.13.1_cu117-python3.10-ubuntu20.04 # Use the Docker image provided by MosaicML

# The parameters section is mounted to /mnt/config/parameters.yaml in the container
# The mounted file is then passed directly to the train.py script
# See LLM-foundry llmfoundry/scripts/train.py to see how the parameters are used in code
parameters:
  # Where to read the data from and save it to locally on the machine
  data_remote: oci://mosaicml-internal-checkpoints/support-bot-demo/data/composer_codebase_mds/
  data_local: ./local-dataset-composercodebase-cache

  # Checkpoint to local filesystem or remote object store
  save_interval: 500ba # How frequently to save checkpoints
  save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
  save_folder: oci://mosaicml-internal-checkpoints/support-bot-demo/checkpoints/composer_codebase/
  save_weights_only: False # Since we only need the weights for the next step, we can reduce the size of the checkpoint
  dist_timeout: 60000 # Set large dist_timeout to allow for checkpoint uploading on a slow connection

  # Maximum sequence length of the model
  # For MPT, you can change this to a different number if you would like to train on longer sequences
  # Note that you would also need to reprocess your data to contain longer sequences
  max_seq_len: 2048

  # Random seed to ensure reproducibility
  global_seed: 15

  # Run Name
  run_name: # If left blank, will be read from env var $RUN_NAME

  # Model
  # This section is used by LLM-foundry to construct the model
  model:
    name: hf_causal_lm
    init_device: mixed # Initially only create the model on CPU once per node to reduce system memory requirements
    pretrained_model_name_or_path: mosaicml/mpt-7b # This can be changed to other models from the HuggingFace model hub
    pretrained: true # If false, will just load the model architecture and randomly initialize the weights
    config_overrides: # Override the default model config (comment this out if you change the model from MPT)
      attn_config:
        attn_impl: triton # Use the triton implementation of attention
        attn_uses_sequence_id: true # Restrict attention to within each concatenated sequence

  # Tokenizer
  # This section is used by LLM-foundry to construct the tokenizer
  tokenizer:
    name: mosaicml/mpt-7b # This can be changed along with the model
    kwargs:
      model_max_length: ${max_seq_len}

  # Dataloaders
  train_loader:
    name: text
    # The dataset section is used by LLM-foundry to construct a StreamingDataset
    dataset:
      local: ${data_local}
      remote: ${data_remote}
      split: train
      shuffle: true
      max_seq_len: ${max_seq_len}
      shuffle_seed: ${global_seed}
      eos_token_id: 0 # The token id that separates concatenated sequences. Change this if you change the tokenizer
    drop_last: true
    num_workers: 8

  eval_loader:
    name: text
    # The dataset section is used by LLM-foundry to construct a StreamingDataset
    dataset:
      local: ${data_local}
      remote: ${data_remote}
      split: validation
      shuffle: false
      max_seq_len: ${max_seq_len}
      shuffle_seed: ${global_seed}
      eos_token_id: 0 # The token id that separates concatenated sequences. Change this if you change the tokenizer
    drop_last: false
    num_workers: 8

  # Learning rate scheduler
  # see LLM-foundry llmfoundry/utils/builders.py::build_scheduler for other built-in options
  scheduler:
    name: cosine_with_warmup
    t_warmup: 500ba
    alpha_f: 0.1


  # Optimizer
  # see LLM-foundry llmfoundry/utils/builders.py::build_optimizer for other built-in options
  optimizer:
    name: decoupled_lionw
    lr: 0.000006
    betas:
    - 0.9
    - 0.99
    weight_decay: 0.000006

  # Algorithms to apply
  # see https://docs.mosaicml.com/projects/composer/en/latest/trainer/algorithms.html
  # for an explanation of algorithms in Composer
  algorithms:
    gradient_clipping:
      clipping_type: norm
      clipping_threshold: 1.0

  # Run configuration
  max_duration: 2ep # Maximum duration of the run. Change to something shorter (e.g. 10ba) for a quick test run
  eval_interval: 500ba # How frequently to evaluate the model
  eval_first: true # Whether to evaluate the model before training
  eval_subset_num_batches: -1 # How many batches to evaluate on. -1 means evaluate on the entire dataset
  global_train_batch_size: 128 # Global batch size. This is the batch size across all GPUs
  seed: ${global_seed}
  device_eval_batch_size: 8 # Evaluation batch size per GPU
  device_train_microbatch_size: auto # Automatically determine the microbatch size per GPU
  precision: amp_bf16

  # Configuration settings for FSDP
  # https://docs.mosaicml.com/projects/composer/en/latest/notes/distributed_training.html#fullyshardeddataparallel-fsdp
  # for more information about FSDP in Composer
  fsdp_config:
    sharding_strategy: FULL_SHARD
    mixed_precision: PURE
    activation_checkpointing: true
    activation_checkpointing_reentrant: false
    activation_cpu_offload: false
    limit_all_gathers: true
    verbose: false

  # Logging configuration
  progress_bar: false
  log_to_console: true
  console_log_interval: 1ba
  python_log_level: debug

  # Uncomment to log to WandB
  # see LLM-foundry llmfoundry/utils/builders.py::build_logger for other built-in options
  loggers:
    wandb: {}

  # Callbacks
  # see LLM-foundry llmfoundry/utils/builders.py::build_callbacks for other built-in options
  callbacks:
    # Periodically generate text from the model, uncomment only if you are logging to WandB
    # generate_callback:
    #   batch_log_interval: 500
    #   do_sample: true
    #   max_new_tokens: 100
    #   prompts:
    #   - The quick brown fox jumps over
    #   - |-
    #     Vegan Banana Bread
    #     Instructions:
    #     1.
    #   - The other day I was explaining what generative AI is to my five year old.
    #   - We are a global semiconductor company primarily offering
    #   - Our company had revenue of
    #   - Our business operations are subject to numerous risks, including
    #   temperature: 1
    #   top_k: 50
    #   top_p: 0.95
    #   use_cache: true
    # Log information about the processing speed of the model
    speed_monitor:
      window_size: 10
    # Log the learning rate over the course of training
    lr_monitor: {}
    # Log information about the memory usage of the model
    memory_monitor: {}
    # Log an estimate of how long the training run has left to complete
    runtime_estimator: {}

  # In-context learning tasks to evaluate on
  # We include one of the tasks from our evaluation suite here as an example
  # see https://github.com/mosaicml/llm-foundry/tree/main/scripts/eval for more details on evaluation using LLM-foundry
  icl_tasks:
  -
    label: arc_easy
    dataset_uri: eval/local_data/world_knowledge/arc_easy.jsonl
    num_fewshot: [0]
    icl_task_type: multiple_choice
    continuation_delimiter: 'Answer: '
