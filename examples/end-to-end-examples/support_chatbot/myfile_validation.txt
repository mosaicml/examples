concat_tok_num: 159013---------------------
n        self.sserver = None\n    \n    def _advertiser(self):\n        advertiser = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        advertiser.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n        advertiser.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        advertiser.bind((\"\", 0))\n        advertiser.settimeout(0.001)\n        msgcontent = f\"{self.name}@{socket.gethostbyname(socket.gethostname()) if self.bind_ip in ['', '0.0.0.0'] else self.bind_ip}:{self.server_port}\"\n        if self.net_encrypted:\n            msgcontent = base64.urlsafe_b64encode(self.fernet.encrypt(msgcontent.encode(\"utf-8\"))).decode(\"utf-8\")\n        broadcast_message = f\"{self.network_id}|adv|{msgcontent}|{self.pk}|END\\n\".encode(\"utf-8\")\n        while self.running:\n            advertiser.sendto(broadcast_message, (\"<broadcast>\", self.advertise_port))\n            time.sleep(self.ad_interval)\n        advertiser.close()\n    \n    def _proc_udp(self, data):\n        data = data.strip()\n        parts = data.decode(\"utf-8\").split(\"|\")\n        if \"brd\" in parts:\n            print(len(parts))\n        if len(parts)!= 5:\n            return\n        if parts[4]!= \"END\":\n            return\n        if parts[0]!= self.network_id:\n            return\n\n        _, ptype, content, pk, _ = parts\n\n        # Check packet type\n        if not ptype == \"adv\":\n            return\n        \n        # Attempt to decrypt packet on network level\n        if self.net_encrypted:\n            try:\n                content: bytes = self.fernet.decrypt(base64.urlsafe_b64decode(content.encode(\"utf-8\")))\n            except InvalidToken:\n                return\n        else:\n            content: bytes = content.encode(\"utf-8\")\n        \n        content = content.decode(\"utf-8\")\n        if \"@\" in content and \":\" in content:\n            name, addr = content.split(\"@\")\n            if name == self.name:\n                return\n            if not re.search(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]):[0-9]{1,5}$\", addr) and not addr.startswith(\"localhost:\"):\n                return\n            \n            self.peers[name] = {\n                \"name\": name,\n                \"addr\": addr,\n                \"public_key\": rsa.PublicKey.load_pkcs1(base64.urlsafe_b64decode(pk.encode(\"utf-8\")))\n            }\n\n    def discover(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #create UDP socket\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind(('', self.advertise_port))\n        while self.running:\n            datas = b\"\"\n            while True:\n                _data, _ = s.recvfrom(1024)\n                if not _data: break\n                datas += _data\n                if b\"END\\n\" in datas:\n                    packs = datas.split(b\"\\n\")\n                    datas = packs.pop()\n                    [Thread(target=self._proc_udp, daemon=True, args=[i,]).start() for i in packs]\n        s.close()\n            \n    \n    def create_handler(self, *args):\n        return NodeHandler(self, *args)\n    \n    def serve(self):\n        \"\"\"\n        Runs node server\n        \"\"\"\n        print(\"Starting advertiser\")\n        self.running = True\n        ad_thread = Thread(target=self._advertiser, name=f\"{self.name}-ad\", daemon=True)\n        ad_thread.start()\n\n        print(\"Starting server\")\n        self.sserver = socketserver.ThreadingTCPServer((self.bind_ip, self.server_port), self.create_handler)\n        srv_thread = Thread(target=self.sserver.serve_forever, name=f\"{self.name}-srv\", daemon=True, kwargs={\"poll_interval\" : 0.25})\n        srv_thread.start()\n\n        print(\"Starting listener\")\n        ls_thread = Thread(target=self.discover, name=f\"{self.name}-ls\", daemon=True)\n        ls_thread.start()\n    \n    def shutdown(self):\n        if self.sserver!= None:\n            self.running = False\n            self.sserver.shutdown()\n    \n    def send(self, target: str, message: typing.Any):\n        try:\n            if not target in self.peers.keys():\n                raise KeyError(f\"Peer {target} not found\")\n            \n            data = self.crypt.encrypt(message, self.peers[target][\"public_key\"])\n            if self.net_encrypted:\n                data = base64.urlsafe_b64encode(self.fernet.encrypt(data))\n            \n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n                # Connect to server and send data\n                sock.connect((self.peers[target][\"addr\"].split(\":\")[0], int(self.peers[target][\"addr\"].split(\":\")[1])))\n                sock.sendall(f\"{self.network_id}|msg|{data.decode('utf-8')}|{self.pk}|END\\n\".encode(\"utf-8\"))\n\n                # Receive data from the server and shut down\n                received = b\"\"\n                nr = sock.recv(1024).strip()\n                while nr:\n                    received += nr\n                    nr = sock.recv(1024).strip()\n                received += nr\n            \n            parts = received.decode(\"utf-8\").split(\"|\")\n            if len(parts)!= 5:\n                warning(f\"Malformed packet {parts} - Too many/few sections\")\n                return\n            if parts[4]!= \"END\":\n                warning(f\"Malformed packet {parts} - Packet incomplete\")\n                return\n            if parts[0]!= self.network_id:\n                warning(f\"Recieved response from non-network node in network {parts[0]}\")\n                return\n\n            _, ptype, content, _, _ = parts\n\n            # Check packet type\n            if ptype!= \"rsp\":\n                raise ValueError(f\"Packet is not a response packet: {ptype}\")\n            \n            # Attempt to decrypt packet on network level\n            if self.net_encrypted:\n                try:\n                    content: bytes = self.fernet.decrypt(base64.urlsafe_b64decode(content.encode(\"utf-8\")))\n                except InvalidToken:\n                    raise ValueError(\"Bad net encryption\")\n            else:\n                content: bytes = content.encode(\"utf-8\")\n            \n            try:\n                content = self.crypt.decrypt(content)\n            except rsa.pkcs1.DecryptionError:\n                raise ValueError(\"Bad node encryption\")\n            return content\n        except:\n            exception()\n            return \"$error\"\n            \n\nclass Node
concat_tok_num: 612439---------------------
);\n        return NULL;\n    }\n    PyDict_Clear(s->memo);\n    return _build_rval_index_tuple(rval, next_idx);\n}\n\nstatic PyObject *\nscanner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    PyScannerObject *s;\n    s = (PyScannerObject *)type->tp_alloc(type, 0);\n    if (s!= NULL) {\n        s->encoding = NULL;\n        s->strict = NULL;\n        s->object_hook = NULL;\n        s->pairs_hook = NULL;\n        s->parse_float = NULL;\n        s->parse_int = NULL;\n        s->parse_constant = NULL;\n    }\n    return (PyObject *)s;\n}\n\nstatic int\nscanner_init(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    /* Initialize Scanner object */\n    PyObject *ctx;\n    static char *kwlist[] = {\"context\", NULL};\n    PyScannerObject *s;\n\n    assert(PyScanner_Check(self));\n    s = (PyScannerObject *)self;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O:make_scanner\", kwlist, &ctx))\n        return -1;\n    \n    if (s->memo == NULL) {\n        s->memo = PyDict_New();\n        if (s->memo == NULL)\n            goto bail;\n    }\n\n    /* PyString_AS_STRING is used on encoding */\n    s->encoding = PyObject_GetAttrString(ctx, \"encoding\");\n    if (s->encoding == NULL)\n        goto bail;\n    if (s->encoding == Py_None) {\n        Py_DECREF(Py_None);\n        s->encoding = PyString_InternFromString(DEFAULT_ENCODING);\n    }\n    else if (PyUnicode_Check(s->encoding)) {\n        PyObject *tmp = PyUnicode_AsEncodedString(s->encoding, NULL, NULL);\n        Py_DECREF(s->encoding);\n        s->encoding = tmp;\n    }\n    if (s->encoding == NULL ||!PyString_Check(s->encoding))\n        goto bail;\n\n    /* All of these will fail \"gracefully\" so we don't need to verify them */\n    s->strict = PyObject_GetAttrString(ctx, \"strict\");\n    if (s->strict == NULL)\n        goto bail;\n    s->object_hook = PyObject_GetAttrString(ctx, \"object_hook\");\n    if (s->object_hook == NULL)\n        goto bail;\n    s->pairs_hook = PyObject_GetAttrString(ctx, \"object_pairs_hook\");\n    if (s->pairs_hook == NULL)\n        goto bail;\n    s->parse_float = PyObject_GetAttrString(ctx, \"parse_float\");\n    if (s->parse_float == NULL)\n        goto bail;\n    s->parse_int = PyObject_GetAttrString(ctx, \"parse_int\");\n    if (s->parse_int == NULL)\n        goto bail;\n    s->parse_constant = PyObject_GetAttrString(ctx, \"parse_constant\");\n    if (s->parse_constant == NULL)\n        goto bail;\n\n    return 0;\n\nbail:\n    Py_CLEAR(s->encoding);\n    Py_CLEAR(s->strict);\n    Py_CLEAR(s->object_hook);\n    Py_CLEAR(s->pairs_hook);\n    Py_CLEAR(s->parse_float);\n    Py_CLEAR(s->parse_int);\n    Py_CLEAR(s->parse_constant);\n    return -1;\n}\n\nPyDoc_STRVAR(scanner_doc, \"JSON scanner object\");\n\nstatic\nPyTypeObject PyScannerType = {\n    PyObject_HEAD_INIT(NULL)\n    0,                    /* tp_internal */\n    \"simplejson._speedups.Scanner\",       /* tp_name */\n    sizeof(PyScannerObject), /* tp_basicsize */\n    0,                    /* tp_itemsize */\n    scanner_dealloc, /* tp_dealloc */\n    0,                    /* tp_print */\n    0,                    /* tp_getattr */\n    0,                    /* tp_setattr */\n    0,                    /* tp_compare */\n    0,                    /* tp_repr */\n    0,                    /* tp_as_number */\n    0,                    /* tp_as_sequence */\n    0,                    /* tp_as_mapping */\n    0,                    /* tp_hash */\n    scanner_call,         /* tp_call */\n    0,                    /* tp_str */\n    0,/* PyObject_GenericGetAttr, */                    /* tp_getattro */\n    0,/* PyObject_GenericSetAttr, */                    /* tp_setattro */\n    0,                    /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,   /* tp_flags */\n    scanner_doc,          /* tp_doc */\n    scanner_traverse,                    /* tp_traverse */\n    scanner_clear,                    /* tp_clear */\n    0,                    /* tp_richcompare */\n    0,                    /* tp_weaklistoffset */\n    0,                    /* tp_iter */\n    0,                    /* tp_iternext */\n    0,                    /* tp_methods */\n    scanner_members,                    /* tp_members */\n    0,                    /* tp_getset */\n    0,                    /* tp_base */\n    0,                    /* tp_dict */\n    0,                    /* tp_descr_get */\n    0,                    /* tp_descr_set */\n    0,                    /* tp_dictoffset */\n    scanner_init,                    /* tp_init */\n    0,/* PyType_GenericAlloc, */        /* tp_alloc */\n    scanner_new,          /* tp_new */\n    0,/* PyObject_GC_Del, */              /* tp_free */\n};\n\nstatic PyObject *\nencoder_new(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    PyEncoderObject *s;\n    s = (PyEncoderObject *)type->tp_alloc(type, 0);\n    if (s!= NULL) {\n        s->markers = NULL;\n        s->defaultfn = NULL;\n        s->encoder = NULL;\n        s->indent = NULL;\n        s->key_separator = NULL;\n        s->item_separator = NULL;\n        s->sort_keys = NULL;\n        s->skipkeys = NULL;\n        s->key_memo = NULL;\n    }\n    return (PyObject *)s;\n}\n\nstatic int\nencoder_init(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    /* initialize Encoder object */\n    static char *kwlist[] = {\"markers\", \"default\", \"encoder\", \"indent\", \"key_separator\", \"item_separator\", \"sort_keys\", \"skipkeys\", \"allow_nan\", \"key_memo\", \"use_decimal\", NULL};\n\n    PyEncoderObject *s;\n    PyObject *markers, *defaultfn, *encoder, *indent, *key_separator;\n    PyObject *item_separator, *sort_keys, *skipkeys, *allow_nan, *key_memo, *use_decimal;\n\n    assert(PyEncoder_Check(self));\n    s = (PyEncoderObject *)self;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"OOOOOOOOOOO:make_encoder\", kwlist,\n        &markers, &defaultfn, &encoder, &indent, &key_separator, &item_separator,\n        &sort_keys, &skipkeys, &allow_nan, &key_memo, &use_decimal))\n        return -1;\n\n    s->markers = markers;\n    s->defaultfn =
concat_tok_num: 645882---------------------
0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   409    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   410    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   411    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   412    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   413    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   414    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   415    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"      TOTAL      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"   416    1      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          2      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0\\n\",\n    \"          3      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0
concat_tok_num: 1339282---------------------
\u6c8c\u6c8d\u6c8e\u6c8f\u6c90\u6c91\u6c92\u6c93\u6c94\u6c95\u6c96\u6c97\u6c98\u6c99\u6c9a\u6c9b\u6c9c\u6c9d\u6c9e\u6c9f\u6ca0\u6ca1\u6ca2\u6ca3\u6ca4\u6ca5\u6ca6\u6ca7\u6ca8\u6ca9\u6caa\u6cab\u6cac\u6cad\u6cae\u6caf\u6cb0\u6cb1\u6cb2\u6cb3\u6cb4\u6cb5\u6cb6\u6cb7\u6cb8\u6cb9\u6cba\u6cbb\u6cbc\u6cbd\u6cbe\u6cbf\u6cc0\u6cc1\u6cc2\u6cc3\u6cc4\u6cc5\u6cc6\u6cc7\u6cc8\u6cc9\u6cca\u6ccb\u6ccc\u6ccd\u6cce\u6ccf\u6cd0\u6cd1\u6cd2\u6cd3\u6cd4\u6cd5\u6cd6\u6cd7\u6cd8\u6cd9\u6cda\u6cdb\u6cdc\u6cdd\u6cde\u6cdf\u6ce0\u6ce1\u6ce2\u6ce3\u6ce4\u6ce5\u6ce6\u6ce7\u6ce8\u6ce9\u6cea\u6ceb\u6cec\u6ced\u6cee\u6cef\u6cf0\u6cf1\u6cf2\u6cf3\u6cf4\u6cf5\u6cf6\u6cf7\u6cf8\u6cf9\u6cfa\u6cfb\u6cfc\u6cfd\u6cfe\u6cff\u6d00\u6d01\u6d02\u6d03\u6d04\u6d05\u6d06\u6d07\u6d08\u6d09\u6d0a\u6d0b\u6d0c\u6d0d\u6d0e\u6d0f\u6d10\u6d11\u6d12\u6d13\u6d14\u6d15\u6d16\u6d17\u6d18\u6d19\u6d1a\u6d1b\u6d1c\u6d1d\u6d1e\u6d1f\u6d20\u6d21\u6d22\u6d23\u6d24\u6d25\u6d26\u6d27\u6d28\u6d29\u6d2a\u6d2b\u6d2c\u6d2d\u6d2e\u6d2f\u6d30\u6d31\u6d32\u6d33\u6d34\u6d35\u6d36\u6d37\u6d38\u6d39\u6d3a\u6d3b\u6d3c\u6d3d\u6d3e\u6d3f\u6d40\u6d41\u6d42\u6d43\u6d44\u6d45\u6d46\u6d47\u6d48\u6d49\u6d4a\u6d4b\u6d4c\u6d4d\u6d4e\u6d4f\u6d50\u6d51\u6d52\u6d53\u6d54\u6d55\u6d56\u6d57\u6d58\u6d59\u6d5a\u6d5b\u6d5c\u6d5d\u6d5e\u6d5f\u6d60\u6d61\u6d62\u6d63\u6d64\u6d65\u6d66\u6d67\u6d68\u6d69\u6d6a\u6d6b\u6d6c\u6d6d\u6d6e\u6d6f\u6d70\u6d71\u6d72\u6d73\u6d74\u6d75\u6d76\u6d77\u6d78\u6d79\u6d7a\u6d7b\u6d7c\u6d7d\u6d7e\u6d7f\u6d80\u6d81\u6d82\u6d83\u6d84\u6d85\u6d86\u6d87\u6d88\u6d89\u6d8a\u6d8b\u6d8c\u6d8d\u6d8e\u6d8f\u6d90\u6d91\u6d92\u6d93\u6d94\u6d95\u6d96\u6d97\u6d98\u6d99\u6d9a\u6d9b\u6d9c\u6d9d\u6d9e\u6d9f\u6da0\u6da1\u6da2\u6da3\u6da4\u6da5\u6da6\u6da7\u6da8\u6da9\u6daa\u6dab\u6dac\u6dad\u6dae\u6daf\u6db0\u6db1\u6db2\u6db3\u6db4\u6db5\u6db6\u6db7\u6db8\u6db9\u6dba\u6dbb\u6dbc\u6dbd\u6dbe\u6dbf\u6dc0\u6dc1\u6dc2\u6dc3\u6dc4\u6dc5\u6dc6\u6dc7\u6dc8\u6dc9\u6dca\u6dcb\u6dcc\u6dcd\u6dce\u6dcf\u6dd0\u6dd1\u6dd2\u6dd3\u6dd4\u6dd5\u6dd6\u6dd7\u6dd8\u6dd9\u6dda\u6ddb\u6ddc\u6ddd\u6dde\u6ddf\u6de0\u6de1\u6de2\u6de3\u6de4\u6de5\u6de6\u6de7\u6de8\u6de9\u6dea\u6deb\u6dec\u6ded\u6dee\u6def\u6df0\u6df1\u6df2\u6df3\u6df4\u6df5\u6df6\u6df7\u6df8\u6df9\u6dfa\u6dfb\u6dfc\u6dfd\u6dfe\u6dff\u6e00\u6e01\u6e02\u6e03\u6e04\u6e05\u6e06\u6e07\u6e08\u6e09\u6e0a\u6e0b\u6e0c\u6e0d\u6e0e\u6e0f\u6e10\u6e11\u6e12\u6e13\u6e14\u6e15\u6e16\u6e17\u6
concat_tok_num: 2466870---------------------
AC-4B97-8096-AF292F9DBE55}'),\r\n\t\t\"SpringGraphic\": (252, 2, (9, 0), (), \"SpringGraphic\", '{61C55C33-4716-4D26-8030-F9D29ED8B413}'),\r\n\t\t\"Stiffness\": (255, 2, (9, 0), (), \"Stiffness\", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'),\r\n\t\t\"TorqueDisplayColor\": (208, 2, (19, 0), (), \"TorqueDisplayColor\", None),\r\n\t\t\"UseSpecialDamping\": (5003, 2, (11, 0), (), \"UseSpecialDamping\", None),\r\n\t\t\"UseSpecialPreload\": (5004, 2, (11, 0), (), \"UseSpecialPreload\", None),\r\n\t\t\"UseSpecialStiffness\": (5002, 2, (11, 0), (), \"UseSpecialStiffness\", None),\r\n\t\t\"UserData\": (107, 2, (8, 0), (), \"UserData\", None),\r\n\t}\r\n\t_prop_map_put_ = {\r\n\t\t\"ActionMarker\": ((203, LCID, 4, 0),()),\r\n\t\t\"Active\": ((152, LCID, 4, 0),()),\r\n\t\t\"BaseBody\": ((5001, LCID, 4, 0),()),\r\n\t\t\"BaseMarker\": ((202, LCID, 4, 0),()),\r\n\t\t\"Comment\": ((102, LCID, 4, 0),()),\r\n\t\t\"ForceDisplay\": ((201, LCID, 4, 0),()),\r\n\t\t\"ForceDisplayColor\": ((207, LCID, 4, 0),()),\r\n\t\t\"ForceDisplayUse\": ((209, LCID, 4, 0),()),\r\n\t\t\"LayerNumber\": ((151, LCID, 4, 0),()),\r\n\t\t\"Name\": ((101, LCID, 4, 0),()),\r\n\t\t\"TorqueDisplayColor\": ((208, LCID, 4, 0),()),\r\n\t\t\"UseSpecialDamping\": ((5003, LCID, 4, 0),()),\r\n\t\t\"UseSpecialPreload\": ((5004, LCID, 4, 0),()),\r\n\t\t\"UseSpecialStiffness\": ((5002, LCID, 4, 0),()),\r\n\t\t\"UserData\": ((107, LCID, 4, 0),()),\r\n\t}\r\n\tdef __iter__(self):\r\n\t\t\"Return a Python iterator for this object\"\r\n\t\ttry:\r\n\t\t\tob = self._oleobj_.InvokeTypes(-4,LCID,3,(13, 10),())\r\n\t\texcept pythoncom.error:\r\n\t\t\traise TypeError(\"This object does not support enumeration\")\r\n\t\treturn win32com.client.util.Iterator(ob, None)\r\n\r\nclass IMTT3DForceSpringNip(DispatchBaseClass):\r\n\t'''MTT3D nip spring force'''\r\n\tCLSID = IID('{E8BD4F07-0B25-44C6-9B8E-0905A9EAE731}')\r\n\tcoclass_clsid = None\r\n\r\n\tdef __setattr__(self, attr, value):\r\n\t\tif '_set_'+attr in dir(self):\r\n\t\t\ttry:\r\n\t\t\t\tself._prop_map_set_function_['_set_'+attr](self, value)\r\n\t\t\texcept:\r\n\t\t\t\tsuper().__setattr__(attr, value)\r\n\t\telse:\r\n\t\t\tsuper().__setattr__(attr, value)\r\n\tdef CopyActionToBase(self, Type):\r\n\t\t'''\r\n\t\tCopy action to base\r\n\t\t\r\n\t\t:param Type: CopyMarkerType\r\n\t\t'''\r\n\t\treturn self._oleobj_.InvokeTypes(206, LCID, 1, (24, 0), ((3, 1),),Type\r\n\t\t\t)\r\n\r\n\r\n\tdef CopyBaseToAction(self, Type):\r\n\t\t'''\r\n\t\tCopy base to action\r\n\t\t\r\n\t\t:param Type: CopyMarkerType\r\n\t\t'''\r\n\t\treturn self._oleobj_.InvokeTypes(205, LCID, 1, (24, 0), ((3, 1),),Type\r\n\t\t\t)\r\n\r\n\r\n\tdef GetRDGeneric(self):\r\n\t\t'''\r\n\t\tFunctionBay Internal Use Only\r\n\t\t\r\n\t\t:rtype: int\r\n\t\t'''\r\n\t\treturn self._oleobj_.InvokeTypes(51, LCID, 1, (20, 0), (),)\r\n\r\n\r\n\tdef _get_ActionMarker(self):\r\n\t\treturn self._ApplyTypes_(*(203, 2, (9, 0), (), \"ActionMarker\", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))\r\n\tdef _get_Active(self):\r\n\t\treturn self._ApplyTypes_(*(152, 2, (11, 0), (), \"Active\", None))\r\n\tdef _get_BaseBody(self):\r\n\t\treturn self._ApplyTypes_(*(5001, 2, (9, 0), (), \"BaseBody\", '{27A86788-8B85-40CF-BE7F-BA915103A7DB}'))\r\n\tdef _get_BaseMarker(self):\r\n\t\treturn self._ApplyTypes_(*(202, 2, (9, 0), (), \"BaseMarker\", '{6B6F192C-B83F-4503-89E8-5CAB8DE726AA}'))\r\n\tdef _get_BasePoint(self):\r\n\t\treturn self._ApplyTypes_(*(5051, 2, (8197, 0), (), \"BasePoint\", None))\r\n\tdef _get_Comment(self):\r\n\t\treturn self._ApplyTypes_(*(102, 2, (8, 0), (), \"Comment\", None))\r\n\tdef _get_Damping(self):\r\n\t\treturn self._ApplyTypes_(*(256, 2, (9, 0), (), \"Damping\", '{07D4A7FC-5B11-4E7D-B805-4B32646009AC}'))\r\n\tdef _get_ForceDisplay(self):\r\n\t\treturn self._ApplyTypes_(*(201, 2, (3, 0), (), \"ForceDisplay\", '{DEB6BDB3-9D28-4F34-953B-9D96D9A147ED}'))\r\n\tdef _get_ForceDisplayColor(self):\r\n\t\treturn self._ApplyTypes_(*(207, 2, (19, 0), (), \"ForceDisplayColor\", None))\r\n\tdef _get_ForceDisplayUse(self):\r\n\t\treturn self._ApplyTypes_(*(209, 2, (11, 0), (), \"ForceDisplayUse\", None))\r\n\tdef _get_FreeLength(self):\r\n\t\treturn self._ApplyTypes_(*(253, 2, (9, 0), (), \"FreeLength\", '{2B5166E3-4B31-4607-B157-BE237A670336}'))\r\n\tdef _get_FullName(self):
